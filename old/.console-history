net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.stop()
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net=network().build()
net.save('test.txt')
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(False)
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().us(False)
net.world().us(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().us(False)
net.world().us(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.wolrd().setCS(True)
net.world().setCS(True)
net.world().set_cs(True)
net.world().setCS(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().us(False)
net.world().us(True)
net.world().cs(False)
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().us(False)
net.world().us(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net.world().cs(False)
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().us(False)
net.world().us(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().pause()
net.world().transition()
net.world().pause()
net.world().cs(True)
net.world().pause()
net.world().transition()
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.world().cs(True)
net.world().us(False)
net.world().us(True)
net.world().cs(False)
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.stop()
net.world().cs(True)
net.plot_receptive_field(net.population('focus').neuron(5,5), 'LAT')
net.population('BLA').neuron(0).rate
net.population('BLA').neuron(0).alpha
help(net.population('BLA').neuron(0))
net.run(1000)
net.stop()
net.plot_receptive_field(net.population('BLA').neuron(5,5), 'FF')
net.plot_receptive_field(net.population('BLA').neuron(5), 'FF')
net=network().build(); env=ConditioningTask().connect(net); net.show(); net.run()
net.stop()
net.save_partial('test.mat', variables={})
net=network().build(); env=ConditioningTask().connect(net); 
net.save_partial('test.mat', variables={})
net=network().build(); env=ConditioningTask().connect(net); 
net.save_partial('test.mat', variables={})
net=network().build(); env=ConditioningTask().connect(net); 
net.save_partial('test.mat', variables={})
net=network().build(); env=ConditioningTask().connect(net); 
net.build_description()
help(cpickle)
import cpickle
import pickle
help(pickle)
import cPickle
help(cPickle)
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net.save('test.txt')
hep(pickle)
help(pickle)
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.txt')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.txt')
import cPickle
net2=cPickle.load('test.txt')
infile=open('test.txt','r')
net2=cPickle.load(infile)
net2
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.txt.gz')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.txt.gz')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.txt.gz')
net.save('test.mat')
net.save('test.txt.gz')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask().connect(net); 
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.run()
net.show()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
print net.build_description()[VTA]
print (net.build_description())['VTA']
print (net.build_description())['VTA'].connections
print (net.build_description())['VTA']['connections']
print (net.build_description())['VTA'].connections
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net.save('test.txt')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
import scipy.io
help savemat
help(scipy.io.savemat)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net.save('test.mat')
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
print net.build_description()
net.save('test.mat')
help(dict)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
print net.build_description()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net.show()
net.run()
help(random)
random.uniform()
random.uniform(0,1)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net.build_description()
net.build_description()['BLA']
net.build_description()['BLA']['INS']
net.build_description()['BLA']['weights']
bla=net.build_description()['BLA']
bla
bla['INS']
bla.keys()
bla['connections']
bla['connections']['INS']
bla['connections']['INS']['weights']['3']
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
import pickle
import cPickle
wfile = open(write_file, 'wb')
wfile = open('net.txt', 'wb')
cPickle.dump(net, wfile, protocol=-1)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
import scipy.io
help(scipy.io.loadmat)
import cPickle
help(cPickle
)
help(cPickle.load)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net.load('test.mat')
import scipy.io
scipy.io.loadmat('test.mat')
desc=scipy.io.loadmat('test.mat', chars_as_strings=True)
desc
desc['populations']
desc=scipy.io.loadmat('test.mat')
desc['populations']
desc=scipy.io.loadmat('test.mat', chars_as_strings=True)
desc['populations']
desc['populations'][1]
pop=desc['populations']
pop
net.save('test.txt')
net.load('test.txt')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.txt')
net.load('test.txt')
rfile=open('test.txt', mode='rb')
desc=cPickle.load(rfile, protocol=-1)
desc=cPickle.load(rfile)
desc
desc.population
desc.populations
desc['populations']
desc['populations'][1]
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.txt')
net.load('test.txt')
rfile=open('test.txt', mode='rb')
desc=cPickle.load(rfile)
desc['populations']
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.txt')
net.load('test.txt')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt')
pop=desc['BLA']
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
desc
desc['BLA']
desc['BLA']['size']
desc['BLA', 'size']
(desc['BLA'])['size']
s=array((desc['BLA'])['size'])
import numpy as np
s=np.array((desc['BLA'])['size'])
s
print s
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
desc
import numpy as np
help(numpy)
help(np)
import scipy.io
A={'a':1, 'b':2}
scipy.io.savemat('matrix.mat', A)
B=scipy.io.loadmat('matrix.mat')
B
dir(B)
dir(desc)
desc.keys()
vta=desc['VTA']
dir(vta)
vta
vta[1]
vta.size
vta(1)
vta.shape
vta[0]
vta[0][0]
vta[0][0][0]
vta[0][0][1]
vta[0][0].shape
vta[0].shape
vta[0][0][2]
bla=desc['BLA']
bla[0]
bla[0][0]
bla[0][0][0]
bla[0][0][1]
bla[0][0][4]
bla.__dict__
help(scpiy.io)
help(scipy.io)
help(scipy.io.matlab)
help(scipy.io.matlab.mio)
B
B['a']
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
desc
desc['population']
desc['populations']
desc['populations'][1]
print desc['populations'][1]
str(desc['populations'][1])
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net.save('test.mat')
desc=net.load('test.mat')
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
desc
desc['populations']
net=network().build(); env=ConditioningTask(net); net.perceive(env)
desc=net.load('test.mat')
desc['populations']
desc['BLA']
desc['BLA'].variables
desc['BLA']['variables']
desc['BLA']['variables']['rate']
desc['BLA']['variables']['rate'][3]
desc['BLA']['connections']
desc['BLA']['connections']['weights']
desc['BLA']['connections'].__dict
desc['BLA']['connections'].__dict__
dir(desc['BLA']['connections'])
desc['BLA']['connections'].keys()
desc['BLA']['connections']['IT']
desc['BLA']['connections']['IT']['weights']['neuron0']
desc['BLA']['connections']['IT']['weights']['neuron_0']
desc['BLA']['connections']['IT']['weights']['learning_rule']
desc['BLA']['connections']['IT']['learning_rule']
desc['BLA']['connections']['IT']['learning_rule']['variables']
desc['BLA']['connections']['IT']['learning_rule']['variables']['alpha']
desc['BLA']['connections']['IT']['learning_rule']['variables'].keys()
net.save('test.txt')
desc2=net.load('test.txt')
desc2['BLA']['connections']['IT']['learning_rule']['variables'].keys()
desc2['BLA']['connections']['IT']['learning_rule']['variables']
desc2['BLA']['connections']['IT']['learning_rule']
desc['BLA']['connections']['IT']['learning_rule']
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net.load('test.mat', architecture=True)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', architecture=True)
net.load('test.mat', state=True)
net.attributes(net.world())
net.attributes(ConditioningTask)
net.attributes(net.world())
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net.load('test.mat', state=True, architecture=True)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True)
net.load('test.mat', state=True, architecture=True)
net.load('test.mat', state=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
print ANNarchy.__dict__
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
ANNarchy.user_script
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
ANNarchy.user_script
ANNarchy.user_script='BG'
net=network().build(); env=ConditioningTask(net); net.perceive(env)
ANNarchy.user_script
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
ANNarchy.user_script
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
help(dict)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
import numpy as np
help(np.array)
help(np.isarray)
help(np.is_array)
help(np.isarray)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net.run(450)
net.wait()
net.save(test.mat)
net.save('test.mat')
net.save(test.mat)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net.population('BLA').neuron(5).rate
net.population('BLA').neuron(5).mp
net.population('BLA').neuron(4).mp
net.population('BLA').neuron(5).mp
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True)
net.load('test.mat', state=True, architecture=True, connection=True)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
b=array('tata')
b=numpy.array('tata')
import numpy
b=numpy.array('tata')
b
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
import numpy as np
b=np.array(3.0)
b
b[0]
b.item(0)
b.size
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net.save('test.txt')
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
import numpy as np
help np.ndarray
help(np.ndarray)
help np.ndarray
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net.load('test.mat', state=True, architecture=True, connections=True)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
import numpy as np
help(np.array)
help(np.array.dim)
help(np.array.ndim)
help(np.array.shape)
help(np.ndarray)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net.population('BLA').neuron(20)
net.population('BLA').neuron(20).nb_connections
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(20).nb_connections
net.load('test.mat', state=True, architecture=True, connections=True)
net.population('BLA').neuron(20).nb_connections
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=True, connections=True)
net.load('test.txt', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.txt', state=True, architecture=True, connections=True)
net.load('test.txt', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=load('test.mat')
net.show()
net.run()
net.world().cs=True
net.world().us=False
net.stop()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.show()
net.run()
net.world().cs=True
env.cs=True
env.us=False
env.cs=True
env.time
net.stop()
net.start()
net.run()
env.cs(True)
net.world().pause()
net.world().cs(True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net.show()
net.run()
net.stop()
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
annarchy_statevariables
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.save('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
neur=net.population('BLA').neuron(0)
neur.learning_rule(
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net.run(1000)
net.wait()
net.run(100000)
net.wait()
net.save('test.mat')
net.population('BLA').neuron(0).learning_rule('FF').alpha
net.population('BLA').neuron(10).learning_rule('FF').alpha
net.population('BLA').neuron(6).learning_rule('FF').alpha
net.save('test.txt')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net.population('BLA').neuron(6).learning_rule('FF').alpha
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.show()
net.run()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.load('test.mat', state=True, architecture=False, connections=True)
net.run(1000)
net.wait()
net.save('test.txt')
net.save('test.mat')
net=load('test.mat', state=True, architecture=False, connections=True)
net=load('test.mat', state=True, architecture=True, connections=True)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net=load('test.mat', state=True, architecture=True, connections=True)
net=load('test.mat', state=True, architecture=False, connections=True)
net
net.population('VIS')
net.population('VIS').size
desc=net.description()
print desc
print desc.size
print desc['size']
print desc['populations']
net.size
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.size
desc=net.description()
print desc['populations']
net.save('test.mat')
net.save('test.txt')
net=load('test.mat', state=True, architecture=True, connections=True)
net.size
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.show()
net.run()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).rate
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net.population('BLA').neuron(0).types
net.population('BLA').neuron(0).nb_types
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).nb_types
net.population('BLA').neuron(0).disconnect('IT')
net.population('BLA').neuron(0).nb_types
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net.population('BLA').neuron(0).disconnect('VTA')
net.population('BLA').neuron(0).nb_types
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('VTA')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('VTA')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net.population('BLA').neuron(0).disconnect('FB')
net.population('BLA').neuron(0).disconnect('FF')
net.population('BLA').neuron(0).disconnect('LAT')
net.population('BLA').neuron(0).nb:connections
net.population('BLA').neuron(0).nb_connections
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net.run()
net.show()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.population('BLA').neuron(0).disconnect('IT')
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.show(); net.run()
net.world().cs/true)
net.world().cs(True)
net.world().us(False)
net.world().cs(False)
net.world().us(True)
help(annarNeuron)
help(neuron)
net=main()
net=network().build(); net.show(); net.run()
net.population('VIS').neuron(0).baseline=1.0
net=network().build(); net.show(); net.run()
net.population('VIS').neuron(0).baseline=1.0
net=network().build(); net.show(); net.run() ; net.population('VIS').neuron(0).baseline=1.0
net=main(); net.show(); net.run() ;
net=network().build()
net.show(); net.run() ;
net=network().build(); net.show(); net.run() ; net.population('VIS').neuron(0).baseline=1.0
env=ConditioningTask(net)
net.perceice(env)
net.perceive(env)
net.show()
net=network().build(); net.show(); net.run() ; net.population('VIS').neuron(0).baseline=1.0
env=ConditioningTask(net)
net.perceive(env)
net=network().build(); net.show(); net.run() ; net.population('VIS').neuron(0).baseline=1.0
env=ConditioningTask(net)
net.perceive(env)
net=network().build(); net.show(); net.run() ; net.population('VIS').neuron(0).baseline=1.0
env=ConditioningTask(net)
net.perceive(env)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
import scitools.easyviz.gnuplot_ as plt
help(plt)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net.stop()
net.record_NAcc()
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net.stop()
net.record(net.population('NAcc_shell'.neuron(0))
)
net.record(net.population('NAcc_shell').neuron(0))
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net.record(net.population('NAcc_shell').neuron(0), 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net.record(net.population('NAcc_shell').neuron(0), 10000)
rec=net.record(net.population('NAcc_shell').neuron(0), 10000)
net.record(net.population('NAcc_shell').neuron(0), 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net.record(net.population('NAcc_shell').neuron(0), 10000)
import scitools.easyviz.gnuplot_ as plt
help(plt.title)
help(plt)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record(net.population('NAcc_shell').neuron(0), 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record(net.population('NAcc_shell').neuron(0), 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record(net.population('NAcc_shell').neuron(0), 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record(net.population('NAcc_shell').neuron(0), 10000)
a=[1 ,2]
a.isinstance(list)
isinstance(a, list)
b=2
isinstance(b, list)
import scitools.easyviz.gnuplot_ as plt
help(plt.plot)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
a=[net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)]
len(a)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 1000)
import scitools.easyviz.gnuplot_ as pltimport scitools.easyviz.gnuplot_ as plt
import scitools.easyviz.gnuplot_ as plt
help(plt.plot)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 1000)
rec=net.record([net.population('vmPFC').neuron(0), net.population('vmPFC').neuron(10)], 10000)
rec=net.record([net.population('vmPFC').neuron(0), net.population('vmPFC').neuron(10)], 100)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
rec=net.record([net.population('vmPFC').neuron(0), net.population('vmPFC').neuron(10)], 100)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 1000)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 10000)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1)], 100000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS).neuron(1), net.population('GUS').neuron(2)], 100000)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 100000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 100000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 100000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 100000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
rec
size(rec)
len(rec)
len(rec[0])
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.stop()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.stop()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.stop()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.stop()
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net.world().us(False)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.stop()
net.world().us(False)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.world().us(False)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.world().us(False)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.world().us(False)
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.record(net.population('NAcc_shell').neuron(2,2), 1000)
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net.record(net.population('NAcc_shell').neuron(2,2), 1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env);
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env);
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env);
rec=net.record([net.population('NAcc_shell').neuron(0), net.population('NAcc_shell').neuron(1), net.population('GUS').neuron(1), net.population('GUS').neuron(2)], 10000)
net.plot_receptive_field(net.population('NAcc_shell').neuron(0), 'FF')
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.plot_receptive_field(net.population('NAcc_shell').neuron(0), 'FF')
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.plot_receptive_field(net.population('NAcc_shell').neuron(0), 'FF')
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.plot_receptive_field(net.population('NAcc_shell').neuron(0), 'FF')
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.plot_receptive_field(net.population('NAcc_shell').neuron(0), 'FF')
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.plot_receptive_field(net.population('NAcc_shell').neuron(0), 'FF')
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.plot_receptive_field(net.population('NAcc_shell').neuron(0), 'FF')
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net.stop()
net.plot_receptive_field(net.population('NAcc_shell').neuron(1), 'FF')
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.run(); net.show()
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.world().trial_duration
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net.stop()
net.record(net.population('vmPFC').neuron(0), 1000)
net.record(net.population('vmPFC').neuron(25), 1000)
net.record(net.population('vmPFC').neuron(25), 10000)
net=main()
help(np.sum)
net=main()
net.time
net=network().build(); env=ConditioningTask(net); net.perceive(env);  net.run()
net.stop()
test_dopamine(net)
net=network().build(); env=ConditioningTask(net); net.perceive(env);  net.run()
net.stop()
test_dopamine(net)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
test_dopamine(net)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
test_dopamine(net)
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
test_dopamine(net)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
test_dopamine(net)
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
test_dopamine(net)
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env); 
net.show(); net.run()
net.world().us(False)
net=main()
net=network().build()
env=ConditioningTask(net)
net.perceive(env)
net.show()
net.run()
net=network().build()
env=ConditioningTask(net)
net.perceive(env)
net.record(net.population('vmPFC').neuron(0, 12), 10000)
help(random)
help(np.random)
net=main()
net=network.build(); env=ConditioningTask(net); net.perceive(env)
net=network()).build(); env=ConditioningTask(net); net.perceive(env)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(1000)
net.timer(10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env)
net.timer(10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.timer(10000)
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show(); net.run()
net=network().build(); env=ValuationTask(net); net.perceive(env)
net.run(10*net.world().trial_duration)
net.wait()
env_cs=ConditioningTask(net)
net.perceive(env_cs)
net.run(10*net.world().trial_duration)
net.show()
net.world().us(False)
net.show()
net.run(1*net.world().trial_duration)
net=network().build(); env=ValuationTask(net); net.perceive(env); net.run(); net.show()
net.stop()
env=ConditioningTask(net); net.perceive(env)
net.run(); net.show()
net=main()
a =array([0.0, 1.0, 0.5],[0.0, 0.5, 0.3],[0.3, 0.8, 0.4])
a =np.array([0.0, 1.0, 0.5],[0.0, 0.5, 0.3],[0.3, 0.8, 0.4])
a =np.array([[0.0, 1.0, 0.5],[0.0, 0.5, 0.3],[0.3, 0.8, 0.4]])
a
b=np.sum(a, axis=0)
b
b.argmax()
(np.sum(np.array(a), axis=0)).argmax()
c=a[:,(np.sum(np.array(a), axis=0)).argmax()]
c
net=main()
net=network().build()
for rule in net.learning_rules(post='BLA', connenction_type='FF'):
 print rule.tau
for rule in net.learning_rules(post='BLA', connection_type='FF'):
 print rule.tau
env=ValuationTask(net); net.perceive(env); net.show(); net.run()
for rule in net.learning_rules(post='NAcc', connection_type='FF'):
 print rule.K_alpha
net=main()
net=network().build()
for rule in net.learning_rules(post='NAcc', connection_type='FF'):
 print rule.K_alpha
net=network().build()
for rule in net.learning_rules(post='NAcc', connection_type='FF'):
 print rule.K_alpha
net=network().build()
for rule in net.learning_rules(post='NAcc', connection_type='FF'):
 print rule.K_alpha
net=network().build()
for rule in net.learning_rules(post='NAcc', connection_type='FF'):
 print rule.K_alpha
net=network().build()
for rule in net.learning_rules(post='NAcc', connection_type='FF'):
 print rule.K_alpha
for rule in net.learning_rules(post='BLA', connection_type='FF'):
 print rule.K_alpha
for rule in net.learning_rules(post='BLA', connection_type='FF'):
 print rule.tau
for rule in net.learning_rules(post='BLA', connection_type='FB'):
 print rule.tau
net=main()
net=network().build(); env=ConditioningTask(net); net.perceive(env); net.show()
net.run()
net=network().build(); env=ConditioningTask(net); net.perceive(env);
net.record(net.population('BLA').neuron(3,3), 10000)
net=main()
